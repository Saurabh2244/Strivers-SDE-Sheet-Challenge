class Solution {

public:
void solve(int col,vector<string> &board,vector<vector<string>> &ans,int n,vector<int> &leftRow,vector<int> &upperDiag,vector<int> &lowDiag){
    if(col==n){
        ans.push_back(board);
        return;
    }

    for(int row=0;row<n;row++){
        if(leftRow[row]==0 && upperDiag[(n-1)+col-row]==0&& lowDiag[row+col]==0){
           
            //add
            board[row][col]='Q';
            leftRow[row]=1;
            upperDiag[(n-1)+col-row]=1;
            lowDiag[row+col]=1;

            solve(col+1,board,ans,n,leftRow,upperDiag,lowDiag);

            //remove
            board[row][col]='.';
            leftRow[row]=0;
            upperDiag[(n-1)+col-row]=0;
            lowDiag[row+col]=0;
        }
    }
    
}

public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n);
        string s(n,'.');

        for(int i=0;i<n;i++){
            board[i]=s;
        }

    vector<int> leftRow(n,0),upperDiag(2*n-1,0),lowDiag(2*n-1,0);
       solve(0,board,ans,n,leftRow,upperDiag,lowDiag);
        return ans;
    }
};
