class Solution{
    
    public:
    void solve(int i,int j,vector<vector<int>> &m,vector<vector<int>> &vis,string move,vector<string> &ans,int n){
        if(i==n-1 && j==n-1){
            ans.push_back(move);
            return;
        }
        
        //down
        if(i+1<n && m[i+1][j]==1 && !vis[i+1][j]){
            vis[i][j]=1;
            
            solve(i+1,j,m,vis,move+'D',ans,n);
            vis[i][j]=0;
        }
        
        //left
        if(j-1>=0 && m[i][j-1]==1 && !vis[i][j-1]){
            vis[i][j]=1;
          
            solve(i,j-1,m,vis,move+'L',ans,n);
            vis[i][j]=0;
        }
        
        //right
        if(j+1<n && m[i][j+1]==1 && !vis[i][j+1]){
             vis[i][j]=1;
            
            solve(i,j+1,m,vis,move+'R',ans,n);
            vis[i][j]=0;
        }
        
        //up
        if(i-1>=0 && m[i-1][j]==1 && !vis[i-1][j]){
               vis[i][j]=1;
           
            solve(i-1,j,m,vis,move+'U',ans,n);
            vis[i][j]=0;
        }
    }
    
    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        vector<string> ans;
        vector<vector<int>> vis(n,vector<int>(n,0));
        string move="";
        if(m[0][0]==1){
            solve(0,0,m,vis,move,ans,n);
        }
        
        return ans;
    }
};
