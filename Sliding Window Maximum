class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        
        deque<int> dq;
        vector<int> ans;

        //first window
        for(int i=0;i<k;i++){
            //removing
            while(!dq.empty() && nums[i]>dq.back()){
                dq.pop_back();
            }

            //adding
            dq.push_back(nums[i]);
        }
        ans.push_back(dq.front());

        //remaining windows
        for(int i=k;i<nums.size();i++){
            //removing element which occur in previous window but not in current window
            if(nums[i-k]>=dq.front()){
                dq.pop_front();
            }

            //removing
            while(!dq.empty() && nums[i]>dq.back()){
                dq.pop_back();
            }

            //adding
            dq.push_back(nums[i]);

            //adding in ans array
            ans.push_back(dq.front());
        }
        return ans;
    }
};
