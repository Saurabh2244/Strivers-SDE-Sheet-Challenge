/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
int getLength(ListNode*head){
    int len=0;
    while(head!=NULL){
        len++;
        head=head->next;
    }
    return len;
}
 ListNode* reverseKGroup(ListNode* head, int k,int length){
     if(length<k){
        return head;
    }

ListNode*prev=NULL;
ListNode*curr=head;
ListNode*forward=NULL;

int cnt=0;
while(cnt<k && curr!=NULL){
  forward=curr->next;
  curr->next=prev;
  prev=curr;
  curr=forward;
  cnt++;
}

if(forward!=NULL){
    head->next=reverseKGroup(forward,k,length-k);
}
return prev;
 }


ListNode* reverseKGroup(ListNode* head, int k) {
int length=getLength(head);
       return reverseKGroup(head,k,length); 
    }
};
