class Solution{
    public:
    double MedianOfArrays(vector<int>& array1, vector<int>& array2)
    {
        // Your code goes here
        int n1=array1.size();
        int n2=array2.size();
        int n=n1+n2;
        if(n1>n2)  return MedianOfArrays(array2,array1);
        
    if(n1==0)
        return n2%2?array2[n2/2]:(array2[n2/2]+array2[n2/2-1])/2.0;
    
    if(n2==0)
        return n1%2?array1[n1/2]:(array1[n1/2]+array1[n1/2-1])/2.0;
        
        int start=0;
        int end=n1;
        int l1,l2,r1,r2;
        int cut1,cut2;
        
      do{
            cut1=start+(end-start)/2;
            cut2=(n+1)/2-cut1;
            
            l1=cut1==0?INT_MIN:array1[cut1-1];
            l2=cut2==0?INT_MIN:array2[cut2-1];
            r1=cut1>=n1?INT_MAX:array1[cut1];  
            r2=cut2>=n2?INT_MAX:array2[cut2];
            
           if(l1<=r2&&l2<=r1)
             // Return Result
             return n%2?max(l1,l2):(max(l1,l2)+min(r1,r2))/2.0;
        else
            
        if(l1>r2)
            end=cut1-1;
        else
            start=cut1+1;
        
        }
        while(start<=end);
        
             
    return 0.0;
    
    }
};
