class Solution{
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    long long cnt=0;
     void merge(long long arr[], long long l,long long m, long long r)
    {
         // Your code h
         vector<long long> ans;
         long long left=l;
         long long right=m+1;
         
         while(left<=m && right<=r){
             if(arr[left]<=arr[right]){
                ans.push_back(arr[left]);
                left++;
            }
            else{
                ans.push_back(arr[right]);
                cnt+=(m-left+1);
                right++;
            }
         }
         
         while(left<=m){
            ans.push_back(arr[left]);
            left++;
         }
         
         while(right<=r){
            ans.push_back(arr[right]);
            right++;
         }
         
         for(int i=l;i<=r;i++){
             arr[i]=ans[i-l];
         }
    }
    
    void ms(long long arr[],long long low,long long high){
        if(low==high){
            return;
        }
        
        long long mid=(low+high)/2;
        ms(arr,low,mid);
        ms(arr,mid+1,high);
        merge(arr,low,mid,high);
    }
    
    
    long long int inversionCount(long long arr[], long long N)
    {
        // Your Code Here
        ms(arr,0,N-1);
        return cnt;
    }

};
